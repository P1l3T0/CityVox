// <auto-generated />
using System;
using CityVoxWeb.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace CityVoxWeb.Data.Migrations
{
    [DbContext(typeof(CityVoxDbContext))]
    partial class CityVoxDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("CityVoxWeb.Data.Models.GeoEntities.Municipality", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("MunicipalityName")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("OpenStreetMapCode")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<Guid>("RegionId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("RegionId");

                    b.ToTable("Municipalities");

                    b.HasData(
                        new
                        {
                            Id = new Guid("4d5c8490-d8d5-4b13-a8aa-6d5d53d4892b"),
                            MunicipalityName = "Vitosha",
                            OpenStreetMapCode = "3759447",
                            RegionId = new Guid("d0282a05-bdb5-4b8d-b90c-ab62a3543ed8")
                        },
                        new
                        {
                            Id = new Guid("c4ce0d3b-0add-4dd4-99f6-cfb3c036b982"),
                            MunicipalityName = "Pancharevo",
                            OpenStreetMapCode = "3759439",
                            RegionId = new Guid("d0282a05-bdb5-4b8d-b90c-ab62a3543ed8")
                        },
                        new
                        {
                            Id = new Guid("b3cca990-b657-4e8d-86cd-aedcda2f8ab5"),
                            MunicipalityName = "Mladost",
                            OpenStreetMapCode = "3759434",
                            RegionId = new Guid("d0282a05-bdb5-4b8d-b90c-ab62a3543ed8")
                        },
                        new
                        {
                            Id = new Guid("c53bd2d0-fb89-4aa1-9888-035f571b5c35"),
                            MunicipalityName = "Iskar",
                            OpenStreetMapCode = "3759427",
                            RegionId = new Guid("d0282a05-bdb5-4b8d-b90c-ab62a3543ed8")
                        },
                        new
                        {
                            Id = new Guid("0c8b02b2-5171-4f2d-9edb-e0cd14f1da12"),
                            MunicipalityName = "Kremikovci",
                            OpenStreetMapCode = "3759431",
                            RegionId = new Guid("d0282a05-bdb5-4b8d-b90c-ab62a3543ed8")
                        },
                        new
                        {
                            Id = new Guid("910a4325-d42b-4894-9e38-dad5f60dbf29"),
                            MunicipalityName = "Novi Iskar",
                            OpenStreetMapCode = "3759436",
                            RegionId = new Guid("d0282a05-bdb5-4b8d-b90c-ab62a3543ed8")
                        },
                        new
                        {
                            Id = new Guid("c6251449-6ee4-4d5d-8b81-88c64cf12049"),
                            MunicipalityName = "Serdika",
                            OpenStreetMapCode = "3759441",
                            RegionId = new Guid("d0282a05-bdb5-4b8d-b90c-ab62a3543ed8")
                        },
                        new
                        {
                            Id = new Guid("6c967841-3aac-4c6f-9065-514abff87d55"),
                            MunicipalityName = "Vrabnitsa",
                            OpenStreetMapCode = "3759448",
                            RegionId = new Guid("d0282a05-bdb5-4b8d-b90c-ab62a3543ed8")
                        },
                        new
                        {
                            Id = new Guid("d447fa1b-d3a6-462b-9554-28c27fc48085"),
                            MunicipalityName = "Nadejda",
                            OpenStreetMapCode = "3759435",
                            RegionId = new Guid("d0282a05-bdb5-4b8d-b90c-ab62a3543ed8")
                        },
                        new
                        {
                            Id = new Guid("9b6306e8-0102-4e3e-bef0-b212e7d06680"),
                            MunicipalityName = "Liulin",
                            OpenStreetMapCode = "3759432",
                            RegionId = new Guid("d0282a05-bdb5-4b8d-b90c-ab62a3543ed8")
                        },
                        new
                        {
                            Id = new Guid("05c2fde5-e9c1-4c2e-88ac-5378bf90f7fe"),
                            MunicipalityName = "Bankia",
                            OpenStreetMapCode = "3759425",
                            RegionId = new Guid("d0282a05-bdb5-4b8d-b90c-ab62a3543ed8")
                        },
                        new
                        {
                            Id = new Guid("bfd4cfb4-8451-4a29-a180-d859e20b8421"),
                            MunicipalityName = "Ovcha kupel",
                            OpenStreetMapCode = "3759438",
                            RegionId = new Guid("d0282a05-bdb5-4b8d-b90c-ab62a3543ed8")
                        },
                        new
                        {
                            Id = new Guid("c0bf4173-ba2d-4f82-a796-5c75f02bf8d6"),
                            MunicipalityName = "Krasna poliana",
                            OpenStreetMapCode = "3759429",
                            RegionId = new Guid("d0282a05-bdb5-4b8d-b90c-ab62a3543ed8")
                        },
                        new
                        {
                            Id = new Guid("d6a334ae-856a-46d4-94b3-92a547a1df96"),
                            MunicipalityName = "Krasno selo",
                            OpenStreetMapCode = "3759430",
                            RegionId = new Guid("d0282a05-bdb5-4b8d-b90c-ab62a3543ed8")
                        },
                        new
                        {
                            Id = new Guid("1c752650-d449-49e2-b5ad-6ea4ffaf89f0"),
                            MunicipalityName = "Triadica",
                            OpenStreetMapCode = "3759445",
                            RegionId = new Guid("d0282a05-bdb5-4b8d-b90c-ab62a3543ed8")
                        },
                        new
                        {
                            Id = new Guid("b56b1a2a-3042-4182-a2b5-9cb46aa6b5c7"),
                            MunicipalityName = "Lozenets",
                            OpenStreetMapCode = "3759433",
                            RegionId = new Guid("d0282a05-bdb5-4b8d-b90c-ab62a3543ed8")
                        },
                        new
                        {
                            Id = new Guid("37e9a5f3-48a5-4b00-99a8-438dc1f49f6e"),
                            MunicipalityName = "Sredec",
                            OpenStreetMapCode = "3759443",
                            RegionId = new Guid("d0282a05-bdb5-4b8d-b90c-ab62a3543ed8")
                        },
                        new
                        {
                            Id = new Guid("dd82b90c-c418-4be9-ac20-cb69ceb5a119"),
                            MunicipalityName = "Oborishte",
                            OpenStreetMapCode = "3759437",
                            RegionId = new Guid("d0282a05-bdb5-4b8d-b90c-ab62a3543ed8")
                        },
                        new
                        {
                            Id = new Guid("6ba3b7f0-2cbd-4e0f-a97e-447939ee1d8a"),
                            MunicipalityName = "Poduyane",
                            OpenStreetMapCode = "3759440",
                            RegionId = new Guid("d0282a05-bdb5-4b8d-b90c-ab62a3543ed8")
                        },
                        new
                        {
                            Id = new Guid("93bf9e90-3ed0-4fca-8628-68f213cf9d67"),
                            MunicipalityName = "Slatina",
                            OpenStreetMapCode = "3759442",
                            RegionId = new Guid("d0282a05-bdb5-4b8d-b90c-ab62a3543ed8")
                        },
                        new
                        {
                            Id = new Guid("fe732ce1-09b8-4374-9e97-7c9431aca5da"),
                            MunicipalityName = "Vazrajdane",
                            OpenStreetMapCode = "3759446",
                            RegionId = new Guid("d0282a05-bdb5-4b8d-b90c-ab62a3543ed8")
                        },
                        new
                        {
                            Id = new Guid("f808947e-cee5-4c0e-b24a-3e6dadc89668"),
                            MunicipalityName = "Ilinden",
                            OpenStreetMapCode = "3759426",
                            RegionId = new Guid("d0282a05-bdb5-4b8d-b90c-ab62a3543ed8")
                        },
                        new
                        {
                            Id = new Guid("145a7a39-5007-4676-b988-264403a6b154"),
                            MunicipalityName = "Studentski",
                            OpenStreetMapCode = "3759444",
                            RegionId = new Guid("d0282a05-bdb5-4b8d-b90c-ab62a3543ed8")
                        },
                        new
                        {
                            Id = new Guid("c758be0b-1753-459e-b11b-d97febf17ecc"),
                            MunicipalityName = "Izgrev",
                            OpenStreetMapCode = "3759428",
                            RegionId = new Guid("d0282a05-bdb5-4b8d-b90c-ab62a3543ed8")
                        });
                });

            modelBuilder.Entity("CityVoxWeb.Data.Models.GeoEntities.Region", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("OpenStreetMapCode")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("RegionName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.HasKey("Id");

                    b.ToTable("Regions");

                    b.HasData(
                        new
                        {
                            Id = new Guid("d0282a05-bdb5-4b8d-b90c-ab62a3543ed8"),
                            OpenStreetMapCode = "4283101",
                            RegionName = "Sofia"
                        });
                });

            modelBuilder.Entity("CityVoxWeb.Data.Models.IssueEntities.Emergency", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Address")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<DateTime>("DueBy")
                        .HasColumnType("datetime2");

                    b.Property<string>("ImageUrl")
                        .HasMaxLength(2048)
                        .HasColumnType("nvarchar(2048)");

                    b.Property<double>("Latitude")
                        .HasColumnType("float");

                    b.Property<double>("Longitude")
                        .HasColumnType("float");

                    b.Property<Guid>("MunicipalityId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("ReportTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ResolvedTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("MunicipalityId");

                    b.HasIndex("UserId");

                    b.ToTable("Emergencies");
                });

            modelBuilder.Entity("CityVoxWeb.Data.Models.IssueEntities.Event", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("EventType")
                        .HasColumnType("int");

                    b.Property<string>("ImageUrl")
                        .HasMaxLength(2048)
                        .HasColumnType("nvarchar(2048)");

                    b.Property<Guid>("MunicipalityId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("MunicipalityId");

                    b.HasIndex("UserId");

                    b.ToTable("Events");
                });

            modelBuilder.Entity("CityVoxWeb.Data.Models.IssueEntities.InfrastructureIssue", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Address")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<DateTime>("DueBy")
                        .HasColumnType("datetime2");

                    b.Property<string>("ImageUrl")
                        .HasMaxLength(2048)
                        .HasColumnType("nvarchar(2048)");

                    b.Property<double>("Latitude")
                        .HasColumnType("float");

                    b.Property<double>("Longitude")
                        .HasColumnType("float");

                    b.Property<Guid>("MunicipalityId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("ReportTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ResolvedTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("MunicipalityId");

                    b.HasIndex("UserId");

                    b.ToTable("InfrastructureIssues");
                });

            modelBuilder.Entity("CityVoxWeb.Data.Models.IssueEntities.Report", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Address")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<DateTime>("DueBy")
                        .HasColumnType("datetime2");

                    b.Property<string>("ImageUrl")
                        .HasMaxLength(2048)
                        .HasColumnType("nvarchar(2048)");

                    b.Property<double>("Latitude")
                        .HasColumnType("float");

                    b.Property<double>("Longitude")
                        .HasColumnType("float");

                    b.Property<Guid>("MunicipalityId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("ReportTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ResolvedTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("MunicipalityId");

                    b.HasIndex("UserId");

                    b.ToTable("Reports");
                });

            modelBuilder.Entity("CityVoxWeb.Data.Models.Notification", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("IsRead")
                        .HasColumnType("bit");

                    b.Property<DateTime>("TimeSent")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Notifications");
                });

            modelBuilder.Entity("CityVoxWeb.Data.Models.RefreshToken", b =>
                {
                    b.Property<string>("Token")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("Expires")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Token");

                    b.HasIndex("UserId");

                    b.ToTable("RefreshTokens");
                });

            modelBuilder.Entity("CityVoxWeb.Data.Models.SocialEntities.Comment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Edited")
                        .HasColumnType("bit");

                    b.Property<Guid>("PostId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("PostId");

                    b.HasIndex("UserId");

                    b.ToTable("Comments");
                });

            modelBuilder.Entity("CityVoxWeb.Data.Models.SocialEntities.Post", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("EmergencyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("EventId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ImageUrls")
                        .HasMaxLength(10000)
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("InfrastructureIssueId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("PostType")
                        .HasColumnType("int");

                    b.Property<Guid?>("ReportId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasMaxLength(600)
                        .HasColumnType("nvarchar(600)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("EmergencyId")
                        .IsUnique()
                        .HasFilter("[EmergencyId] IS NOT NULL");

                    b.HasIndex("EventId")
                        .IsUnique()
                        .HasFilter("[EventId] IS NOT NULL");

                    b.HasIndex("InfrastructureIssueId")
                        .IsUnique()
                        .HasFilter("[InfrastructureIssueId] IS NOT NULL");

                    b.HasIndex("ReportId")
                        .IsUnique()
                        .HasFilter("[ReportId] IS NOT NULL");

                    b.HasIndex("UserId");

                    b.ToTable("Posts");
                });

            modelBuilder.Entity("CityVoxWeb.Data.Models.SocialEntities.VotePost", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsUpvote")
                        .HasColumnType("bit");

                    b.Property<Guid>("PostId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("PostId");

                    b.HasIndex("UserId");

                    b.ToTable("PostsVotes");
                });

            modelBuilder.Entity("CityVoxWeb.Data.Models.UserEntities.ApplicationUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<DateTime>("LastLoginTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("ProfilePictureUrl")
                        .HasMaxLength(2048)
                        .HasColumnType("nvarchar(2048)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("CityVoxWeb.Data.Models.UserEntities.MunicipalityRepresentative", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Bio")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Department")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("MunicipalityId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("OfficeEmail")
                        .HasMaxLength(320)
                        .HasColumnType("nvarchar(320)");

                    b.Property<string>("OfficePhoneNumber")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("Position")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("MunicipalityId");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("MunicipalityRepresentatives");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("99ae3bb9-5e34-42ce-92e0-ea07d45fe244"),
                            ConcurrencyStamp = "6c58d5e4-7438-4d12-826a-b63cd03c2c62",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = new Guid("446c78ea-0251-4b2c-809f-6f30ba8afcf9"),
                            ConcurrencyStamp = "4b35a3f0-ef90-42f3-8b18-f305c0d45a6d",
                            Name = "User",
                            NormalizedName = "USER"
                        },
                        new
                        {
                            Id = new Guid("f86b1ef8-08cd-49a0-8112-18ffb9fea577"),
                            ConcurrencyStamp = "f3de3520-d777-4134-ab37-bd5225696e4e",
                            Name = "Representative",
                            NormalizedName = "REPRESENTATIVE"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("CityVoxWeb.Data.Models.GeoEntities.Municipality", b =>
                {
                    b.HasOne("CityVoxWeb.Data.Models.GeoEntities.Region", "Region")
                        .WithMany("Municipalities")
                        .HasForeignKey("RegionId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Region");
                });

            modelBuilder.Entity("CityVoxWeb.Data.Models.IssueEntities.Emergency", b =>
                {
                    b.HasOne("CityVoxWeb.Data.Models.GeoEntities.Municipality", "Municipality")
                        .WithMany("Emergencies")
                        .HasForeignKey("MunicipalityId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("CityVoxWeb.Data.Models.UserEntities.ApplicationUser", "User")
                        .WithMany("Emergencies")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Municipality");

                    b.Navigation("User");
                });

            modelBuilder.Entity("CityVoxWeb.Data.Models.IssueEntities.Event", b =>
                {
                    b.HasOne("CityVoxWeb.Data.Models.GeoEntities.Municipality", "Municipality")
                        .WithMany("Events")
                        .HasForeignKey("MunicipalityId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("CityVoxWeb.Data.Models.UserEntities.ApplicationUser", "User")
                        .WithMany("Events")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Municipality");

                    b.Navigation("User");
                });

            modelBuilder.Entity("CityVoxWeb.Data.Models.IssueEntities.InfrastructureIssue", b =>
                {
                    b.HasOne("CityVoxWeb.Data.Models.GeoEntities.Municipality", "Municipality")
                        .WithMany("InfrastructureIssues")
                        .HasForeignKey("MunicipalityId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("CityVoxWeb.Data.Models.UserEntities.ApplicationUser", "User")
                        .WithMany("InfrastructureIssues")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Municipality");

                    b.Navigation("User");
                });

            modelBuilder.Entity("CityVoxWeb.Data.Models.IssueEntities.Report", b =>
                {
                    b.HasOne("CityVoxWeb.Data.Models.GeoEntities.Municipality", "Municipality")
                        .WithMany("Reports")
                        .HasForeignKey("MunicipalityId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("CityVoxWeb.Data.Models.UserEntities.ApplicationUser", "User")
                        .WithMany("Reports")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Municipality");

                    b.Navigation("User");
                });

            modelBuilder.Entity("CityVoxWeb.Data.Models.Notification", b =>
                {
                    b.HasOne("CityVoxWeb.Data.Models.UserEntities.ApplicationUser", "User")
                        .WithMany("Notifications")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("CityVoxWeb.Data.Models.RefreshToken", b =>
                {
                    b.HasOne("CityVoxWeb.Data.Models.UserEntities.ApplicationUser", "User")
                        .WithMany("RefreshTokens")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("CityVoxWeb.Data.Models.SocialEntities.Comment", b =>
                {
                    b.HasOne("CityVoxWeb.Data.Models.SocialEntities.Post", "Post")
                        .WithMany("Comments")
                        .HasForeignKey("PostId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CityVoxWeb.Data.Models.UserEntities.ApplicationUser", "User")
                        .WithMany("Comments")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Post");

                    b.Navigation("User");
                });

            modelBuilder.Entity("CityVoxWeb.Data.Models.SocialEntities.Post", b =>
                {
                    b.HasOne("CityVoxWeb.Data.Models.IssueEntities.Emergency", "Emergency")
                        .WithOne("Post")
                        .HasForeignKey("CityVoxWeb.Data.Models.SocialEntities.Post", "EmergencyId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("CityVoxWeb.Data.Models.IssueEntities.Event", "Event")
                        .WithOne("Post")
                        .HasForeignKey("CityVoxWeb.Data.Models.SocialEntities.Post", "EventId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("CityVoxWeb.Data.Models.IssueEntities.InfrastructureIssue", "InfrastructureIssue")
                        .WithOne("Post")
                        .HasForeignKey("CityVoxWeb.Data.Models.SocialEntities.Post", "InfrastructureIssueId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("CityVoxWeb.Data.Models.IssueEntities.Report", "Report")
                        .WithOne("Post")
                        .HasForeignKey("CityVoxWeb.Data.Models.SocialEntities.Post", "ReportId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("CityVoxWeb.Data.Models.UserEntities.ApplicationUser", "User")
                        .WithMany("Posts")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Emergency");

                    b.Navigation("Event");

                    b.Navigation("InfrastructureIssue");

                    b.Navigation("Report");

                    b.Navigation("User");
                });

            modelBuilder.Entity("CityVoxWeb.Data.Models.SocialEntities.VotePost", b =>
                {
                    b.HasOne("CityVoxWeb.Data.Models.SocialEntities.Post", "Post")
                        .WithMany("Votes")
                        .HasForeignKey("PostId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CityVoxWeb.Data.Models.UserEntities.ApplicationUser", "User")
                        .WithMany("VotePosts")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Post");

                    b.Navigation("User");
                });

            modelBuilder.Entity("CityVoxWeb.Data.Models.UserEntities.MunicipalityRepresentative", b =>
                {
                    b.HasOne("CityVoxWeb.Data.Models.GeoEntities.Municipality", "Municipality")
                        .WithMany("MunicipalityRepresentatives")
                        .HasForeignKey("MunicipalityId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("CityVoxWeb.Data.Models.UserEntities.ApplicationUser", "User")
                        .WithOne()
                        .HasForeignKey("CityVoxWeb.Data.Models.UserEntities.MunicipalityRepresentative", "UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Municipality");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.HasOne("CityVoxWeb.Data.Models.UserEntities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.HasOne("CityVoxWeb.Data.Models.UserEntities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CityVoxWeb.Data.Models.UserEntities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.HasOne("CityVoxWeb.Data.Models.UserEntities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CityVoxWeb.Data.Models.GeoEntities.Municipality", b =>
                {
                    b.Navigation("Emergencies");

                    b.Navigation("Events");

                    b.Navigation("InfrastructureIssues");

                    b.Navigation("MunicipalityRepresentatives");

                    b.Navigation("Reports");
                });

            modelBuilder.Entity("CityVoxWeb.Data.Models.GeoEntities.Region", b =>
                {
                    b.Navigation("Municipalities");
                });

            modelBuilder.Entity("CityVoxWeb.Data.Models.IssueEntities.Emergency", b =>
                {
                    b.Navigation("Post");
                });

            modelBuilder.Entity("CityVoxWeb.Data.Models.IssueEntities.Event", b =>
                {
                    b.Navigation("Post");
                });

            modelBuilder.Entity("CityVoxWeb.Data.Models.IssueEntities.InfrastructureIssue", b =>
                {
                    b.Navigation("Post");
                });

            modelBuilder.Entity("CityVoxWeb.Data.Models.IssueEntities.Report", b =>
                {
                    b.Navigation("Post");
                });

            modelBuilder.Entity("CityVoxWeb.Data.Models.SocialEntities.Post", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("Votes");
                });

            modelBuilder.Entity("CityVoxWeb.Data.Models.UserEntities.ApplicationUser", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("Emergencies");

                    b.Navigation("Events");

                    b.Navigation("InfrastructureIssues");

                    b.Navigation("Notifications");

                    b.Navigation("Posts");

                    b.Navigation("RefreshTokens");

                    b.Navigation("Reports");

                    b.Navigation("VotePosts");
                });
#pragma warning restore 612, 618
        }
    }
}
